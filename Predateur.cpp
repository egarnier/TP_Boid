//****************************************************************************
//
//
//
//****************************************************************************


 
 
// ===========================================================================
//                                   Libraries
// ===========================================================================
#include <stdlib.h>  
#include <time.h> 
#include <math.h>


// ===========================================================================
//                                 Project Files
// ===========================================================================
#include "Predateur.h"
#include "params.h"




//############################################################################
//                                                                           #
//                           Class Template_class                            #
//                                                                           #
//############################################################################

// ===========================================================================
//                         Definition of static attributes
// ===========================================================================

// ===========================================================================
//                                  Constructors
// ===========================================================================
Predateur::Predateur(void)
{
	xi = new double[2];
	xi[0] = rand()%640;
	xi[1] = rand()%480;

	vi = new double[2];
	vi[0] = rand()%20;
	vi[1] = rand()%20;

	temps_stop = 0;
}

Predateur::Predateur(const Predateur &model)
{
	xi = new double[2];
	xi[0] = model.GetXi()[0];
	xi[1] = model.GetXi()[1];

	vi = new double[2];
	vi[0] = model.GetVi()[0];
	vi[1] = model.GetVi()[1];

	temps_stop = 0;
}

// ===========================================================================
//                                  Destructor
// ===========================================================================
Predateur::~Predateur(void)
{
	delete[] xi;
	xi = NULL;
	delete[] vi;
	vi=NULL;
}

// ===========================================================================
//                                 Public Methods
// ===========================================================================
void Predateur::speedpred(int length_pop, Agent* pop){

	double norm = Rp;
	double dis = 0;
	double* proie = new double[2];
	proie[0] = 0;
	proie[1] = 0;

	for(int i=0; i<length_pop; i++)
	{
		dis = sqrt((pop[i].GetXi()[0] - xi[0])*(pop[i].GetXi()[0] - xi[0]) + (pop[i].GetXi()[1] - xi[1])*(pop[i].GetXi()[1] - xi[1]));

		if(dis < norm)
		{
			norm = dis;
			proie[0] = pop[i].GetXi()[0];
			proie[1] = pop[i].GetXi()[1];		
		}
	}


	if(norm != Rp)
	{
		vi[0] = proie[0] - xi[0];
		vi[1] = proie[1] - xi[1];
	}
	else
	{
		vi[0] = rand()%20;
		vi[1] = rand()%20; 
	}
	
	double norm2 = sqrt(vi[0]*vi[0] + vi[1]*vi[1]);
	if(norm2 > Vpmax)
	{
		vi[0] = (vi[0]*Vpmax)/norm2;
		vi[1] = (vi[1]*Vpmax)/norm2;
	}

	xi[0] = xi[0] + dt2*vi[0];
	xi[1] = xi[1] + dt2*vi[1];

	printf("%f %f\n",vi[0],vi[1]);

	delete[] proie;	
	proie = NULL;
}



// ===========================================================================
//                                Protected Methods
// ===========================================================================

// ===========================================================================
//                               Non inline accessors
// ===========================================================================
