//****************************************************************************
//
//
//
//****************************************************************************


 
 
// ===========================================================================
//                                   Libraries
// ===========================================================================



// ===========================================================================
//                                 Project Files
// ===========================================================================
#include <math.h>
#include "Agent.h"
#define dt 0.5 



//############################################################################
//                                                                           #
//                           Class Template_class                            #
//                                                                           #
//############################################################################

// ===========================================================================
//                         Definition of static attributes
// ===========================================================================
int Agent::RADIUS = 20;

// ===========================================================================
//                                  Constructors
// ===========================================================================
Agent::Agent(void)
{
	xi = new int[2];
	xi[0] = 0;
	xi[1] = 0;

	vi = new double[2];
	vi[0] = 0;
	vi[1] = 0;
}

Agent::Agent(int xi1, int xi2)
{
	xi = new int[2];
	xi[0] = xi1;
	xi[1] = xi2;

	vi = new double[2];
	vi[0] = 0;
	vi[1] = 0;
}

Agent::Agent(int xi1, int xi2, double vi1, double vi2)
{
	xi = new int[2];
	xi[0] = xi1;
	xi[1] = xi2;

	vi = new double[2];
	vi[0] = vi1;
	vi[1] = vi2;
}

/*Agent::Agent(const Agent& agt)
{
	printf("celui que je copie %d\n",(agt.getXi())[0]);
	xi = new int[2];
	xi[0] = agt.getXi()[0];
	xi[1] = agt.getXi()[1];
	
	vi = new double[2];
	vi[0] = agt.getVi()[0];
	vi[1] = agt.getVi()[1];
	printf("dans le constr by copy %d\n",xi[0]);
}
*/

// ===========================================================================
//                                  Destructor
// ===========================================================================
Agent::~Agent(void)
{
	delete xi;
	delete vi;
}

// ===========================================================================
//                                 Public Methods
// ===========================================================================
// Getters
int* Agent::getXi(void) const
{
	return xi;
}
    
double* Agent::getVi(void) const
{
	return vi;
}
    
int Agent::getR(void) const
{
	return RADIUS;
}

double Agent::getSpeed(void) const
{
	double speed = sqrt(vi[0]*vi[0]+vi[1]*vi[1]);
	return speed;
}



// ===========================================================================
//                                Protected Methods
// ===========================================================================

// ===========================================================================
//                               Non inline accessors
// ===========================================================================
